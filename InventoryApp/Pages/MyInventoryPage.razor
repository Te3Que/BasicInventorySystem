@page "/MyInventory"
@using System.Text.Json
@using System.Text.Json.Serialization
@using InventoryApp.Models
@inject IHttpClientFactory ClientFactory

@if (products == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <table>
	<thead>
		<tr>
			<td>Name</td>
			<td>Amount</td>
			<td>Location</td>
			<td>Barcode</td>
		</tr>
	</thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.productName</td>
                    <td>@product.productAmount</td>
                    <td>@product.productLocation</td>
                    <td>@product.productBarcode</td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    private IEnumerable<Product> products = Array.Empty<Product>();
    private bool getProductsError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "http://localhost:5001/api/Product");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            products = await JsonSerializer.DeserializeAsync
                <IEnumerable<Product>>(responseStream);
        }
        else
        {
            getProductsError = true;
        }

        shouldRender = true;
    }
}